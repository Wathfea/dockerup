version: '3'
services:

  ### PHP ###########################################
  php:
    build:
      context: .docker/php
      dockerfile: Dockerfile
      args:
        - PROJECT_PHP_VERSION=${PHP_VERSION}
        - PROJECT_PATH=${PROJECT_PATH}
        - INSTALL_BASE_PACKAGES=${INSTALL_BASE_PACKAGES}
    restart: unless-stopped
    volumes:
      - ./:/var/www/html
    networks:
      - php-network
      - queue-network
      - db-network
    depends_on:
      - db
      - redis

  ### Nginx ###########################################
  webserver:
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./:/var/www/html
      - .docker/nginx/conf.d/:/etc/nginx/conf.d/
      - .docker/nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - php-network
    healthcheck:
      test: wget --quiet --tries=1 --spider http://localhost || exit 1z
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - php

  ### DB UI Manager ###########################################
  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - ${ADMINER_PORT}:8080
    networks:
      - db-network
    depends_on:
      - db

  ### Mysql ###########################################
  db:
    image: mysql:5.7.22
    restart: unless-stopped
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=rootpass
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql/
      - .docker/mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - db-network
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
      interval: 30s
      timeout: 10s
      retries: 5

  ### PostgreSQL ###########################################
  #  db:
  #    build:
  #      context: .docker/postgres
  #      args:
  #        - POSTGRES_VERSION=${POSTGRES_VERSION}
  #    volumes:
  #      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
  #      - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
  #    ports:
  #      - "${POSTGRES_PORT}:5432"
  #    environment:
  #      - POSTGRES_DB=${POSTGRES_DB}
  #      - POSTGRES_USER=${POSTGRES_USER}
  #      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #    networks:
  #      - db-network
  #  healthcheck:
  #    test: [ "CMD-SHELL", "pg_isready -U postgres" ]
  #    interval: 10s
  #    timeout: 5s
  #    retries: 5

  ### Redis ###########################################
  redis:
    image: redis:5-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    restart: unless-stopped
    networks:
      - queue-network
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  ### Loadbalancer using HAProxy ###########################################
  load_balancer:
    image: dockercloud/haproxy
    links:
      - webserver
    ports:
      - "${APP_PORT}:80"
    environment:
      - BALANCE=leastconn
      - MAXCONN=3000
      - STATS_AUTH="stats:pass"
      - STATS_PORT=1936
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      - php-network

  ### Mailhog ################################################
  mailhog:
    build: .docker/mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - php-network
      - db-network
  ### Node ################################################
  node:
    build:
      context: .docker/node
      dockerfile: Dockerfile
      args:
        - PROJECT_PATH=${PROJECT_PATH}
    environment:
      APP_ENV: ${APP_ENV}
    volumes:
      - ./:/var/www
    networks:
      - php-network
    depends_on:
      - php
#Docker Networks
networks:
  php-network:
    driver: bridge
  queue-network:
    driver: bridge
  db-network:
    driver: bridge
